#!/usr/bin/env bash
# -------------------------------------------------------------------
# macOS Bootstrap Runner Script
#
# Usage: ./macos_runner [filter] [--dryrun] [--help]
#
# This script runs all executable files in the "runs/macos" directory.
#
# Options:
#   filter      - Only run scripts matching this pattern
#   --dryrun    - Dry run (don't actually execute scripts)
#   --help      - Display this help message
#
# Exit codes:
#   0 - All scripts completed successfully
#   1 - One or more scripts failed
# -------------------------------------------------------------------

set -eo pipefail

trap 'echo "ERROR: Command failed at line $LINENO"' ERR

script_dir="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)"
filter=""
dryrun="0"
runnable_dir="runs/macos"

usage() {
    sed -ne '/^# -/,/^# --/p' "$0" | sed -e 's/^# //g' -e 's/^#//g'
    exit 1
}

while [[ $# > 0 ]]; do
    case "$1" in
        --help|-h)
            usage
            ;;
        --dryrun)
            dryrun="1"
            ;;
        *)
            filter="$1"
            ;;
    esac
    shift
done

cd $script_dir

if [ ! -d "$runnable_dir" ]; then
    echo "ERROR: '$runnable_dir' does not exist"
    exit 1
fi

scripts=$(find "$runnable_dir" -mindepth 1 -maxdepth 1 -type f -perm -u+x | sort)

log() {
    if [[ $dryrun == "1" ]]; then
        echo "[DRY_RUN]: $@"
    else
        echo "$@"
    fi
}

execute() {
    log "execute: $@"

    if [[ $dryrun == "1" ]]; then
        return 0
    fi

    "$@"

    local status=$?

    if [ $status -ne 0 ]; then
        echo "ERROR: Command '$@' failed with status $status"
        return $status
    fi
    return 0
}

log "macOS runner started, filter=$filter"

executed=0
failed=0

for script in $scripts; do
    script_basename=$(basename "$script")

    if [[ -n "$filter" ]] && ! echo "$script_basename" | grep -q "$filter"; then
        log "condition $filter filtered $script"
        continue
    fi

    log "running script: $script"
    if ! execute "$script"; then
        log "ERROR: Script $script failed"
        ((failed++))
        continue
    fi

    ((executed++))
done

log "Run completed: $executed scripts executed successfully, $failed scripts failed"

if [ $failed -gt 0 ]; then
    exit 1
else
    exit 0
fi
